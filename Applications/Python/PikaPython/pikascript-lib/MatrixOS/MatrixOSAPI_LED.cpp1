#include "MatrixOS.h"
#include "pikaScript.h"
#include "PikaObj.h"

extern "C" {
    // LED class implementation
    void MatrixOSAPI_LED_NextBrightness(PikaObj *self) {
        MatrixOS::LED::NextBrightness();
    }

    void MatrixOSAPI_LED_SetBrightness(PikaObj *self, int brightness) {
        MatrixOS::LED::SetBrightness(brightness);
    }

    void MatrixOSAPI_LED_SetBrightnessMultiplier(PikaObj *self, char* partition_name, float multiplier) {
        MatrixOS::LED::SetBrightnessMultiplier(string(partition_name), multiplier);
    }

    void MatrixOSAPI_LED_SetColor(PikaObj *self, PikaObj* xy, PikaObj* color, int layer) {
        int x = obj_getInt(xy, (char*)"x");
        int y = obj_getInt(xy, (char*)"y");
        Point point(x, y);
        
        // For now, treat color as RGB integer value
        int rgb_value = obj_getInt(color, (char*)"value");
        Color color_obj(rgb_value);
        
        MatrixOS::LED::SetColor(point, color_obj, layer);
    }

    void MatrixOSAPI_LED_SetColorByID(PikaObj *self, int id, PikaObj* color, int layer) {
        // For now, treat color as RGB integer value
        int rgb_value = obj_getInt(color, (char*)"value");
        Color color_obj(rgb_value);
        
        MatrixOS::LED::SetColor(id, color_obj, layer);
    }

    void MatrixOSAPI_LED_Fill(PikaObj *self, PikaObj* color, int layer) {
        // For now, treat color as RGB integer value
        int rgb_value = obj_getInt(color, (char*)"value");
        Color color_obj(rgb_value);
        
        MatrixOS::LED::Fill(color_obj, layer);
    }

    void MatrixOSAPI_LED_FillPartition(PikaObj *self, char* partition, PikaObj* color, int layer) {
        // For now, treat color as RGB integer value
        int rgb_value = obj_getInt(color, (char*)"value");
        Color color_obj(rgb_value);
        
        MatrixOS::LED::FillPartition(string(partition), color_obj, layer);
    }

    void MatrixOSAPI_LED_Update(PikaObj *self, int layer) {
        MatrixOS::LED::Update(layer);
    }

    int MatrixOSAPI_LED_CurrentLayer(PikaObj *self) {
        return MatrixOS::LED::CurrentLayer();
    }

    int MatrixOSAPI_LED_CreateLayer(PikaObj *self, int crossfade) {
        return MatrixOS::LED::CreateLayer(crossfade);
    }

    void MatrixOSAPI_LED_CopyLayer(PikaObj *self, int dest, int src) {
        MatrixOS::LED::CopyLayer(dest, src);
    }

    int MatrixOSAPI_LED_DestroyLayer(PikaObj *self, int crossfade) {
        return MatrixOS::LED::DestroyLayer(crossfade) ? 1 : 0;
    }

    void MatrixOSAPI_LED_Fade(PikaObj *self, int crossfade) {
        MatrixOS::LED::Fade(crossfade);
    }

    void MatrixOSAPI_LED_PauseUpdate(PikaObj *self, int pause) {
        MatrixOS::LED::PauseUpdate(pause != 0);
    }

    int MatrixOSAPI_LED_GetLedCount(PikaObj *self) {
        return MatrixOS::LED::GetLedCount();
    }
}