#include "pikaScript.h"
#include "PikaObj.h"

#include "Point.h"

extern "C" {
    // Point class implementation
    void MatrixOSKeyEvent_Point___init__(PikaObj *self, int x, int y) {
        obj_setInt(self, (char*)"x", x);
        obj_setInt(self, (char*)"y", y);
    }

    PikaObj* MatrixOSKeyEvent_Point___add__(PikaObj *self, PikaObj* other) {
        int x1 = obj_getInt(self, (char*)"x");
        int y1 = obj_getInt(self, (char*)"y");
        int x2 = obj_getInt(other, (char*)"x");
        int y2 = obj_getInt(other, (char*)"y");
        
        PikaObj* result = newNormalObj(New_PikaObj);
        obj_setInt(result, (char*)"x", x1 + x2);
        obj_setInt(result, (char*)"y", y1 + y2);
        return result;
    }

    PikaObj* MatrixOSKeyEvent_Point___sub__(PikaObj *self, PikaObj* other) {
        int x1 = obj_getInt(self, (char*)"x");
        int y1 = obj_getInt(self, (char*)"y");
        int x2 = obj_getInt(other, (char*)"x");
        int y2 = obj_getInt(other, (char*)"y");
        
        PikaObj* result = newNormalObj(New_PikaObj);
        obj_setInt(result, (char*)"x", x1 - x2);
        obj_setInt(result, (char*)"y", y1 - y2);
        return result;
    }

    PikaObj* MatrixOSKeyEvent_Point___mul__(PikaObj *self, int val) {
        int x = obj_getInt(self, (char*)"x");
        int y = obj_getInt(self, (char*)"y");
        
        PikaObj* result = newNormalObj(New_PikaObj);
        obj_setInt(result, (char*)"x", x * val);
        obj_setInt(result, (char*)"y", y * val);
        return result;
    }

    PikaObj* MatrixOSKeyEvent_Point___div__(PikaObj *self, int val) {
        int x = obj_getInt(self, (char*)"x");
        int y = obj_getInt(self, (char*)"y");
        
        if (val == 0) {
            // Return invalid point for division by zero
            PikaObj* result = newNormalObj(New_PikaObj);
            obj_setInt(result, (char*)"x", UINT16_MAX);
            obj_setInt(result, (char*)"y", UINT16_MAX);
            return result;
        }
        
        PikaObj* result = newNormalObj(New_PikaObj);
        obj_setInt(result, (char*)"x", x / val);
        obj_setInt(result, (char*)"y", y / val);
        return result;
    }

    int MatrixOSKeyEvent_Point___eq__(PikaObj *self, PikaObj* other) {
        int x1 = obj_getInt(self, (char*)"x");
        int y1 = obj_getInt(self, (char*)"y");
        int x2 = obj_getInt(other, (char*)"x");
        int y2 = obj_getInt(other, (char*)"y");
        
        return (x1 == x2) && (y1 == y2) ? 1 : 0;
    }

    int MatrixOSKeyEvent_Point___ne__(PikaObj *self, PikaObj* other) {
        return MatrixOSKeyEvent_Point___eq__(self, other) ? 0 : 1;
    }

    PikaObj* MatrixOSKeyEvent_Point_Rotate(PikaObj *self, int rotation, PikaObj* dimension, int reverse) {
        int x = obj_getInt(self, (char*)"x");
        int y = obj_getInt(self, (char*)"y");
        int dim_x = obj_getInt(dimension, (char*)"x");
        int dim_y = obj_getInt(dimension, (char*)"y");
        
        Point point(x, y);
        Point dim(dim_x, dim_y);
        Point rotated = point.Rotate((Direction)rotation, dim, reverse != 0);
        
        PikaObj* result = newNormalObj(New_PikaObj);
        obj_setInt(result, (char*)"x", rotated.x);
        obj_setInt(result, (char*)"y", rotated.y);
        return result;
    }

    PikaObj* MatrixOSKeyEvent_Point_Invalid(PikaObj *self) {
        PikaObj* result = newNormalObj(New_PikaObj);
        obj_setInt(result, (char*)"x", UINT16_MAX);
        obj_setInt(result, (char*)"y", UINT16_MAX);
        return result;
    }
}