#include "MatrixOS.h"
#include "pikaScript.h"
#include "PikaObj.h"

extern "C" {
    // KeyPad class implementation
    PikaObj* MatrixOSAPI_KeyPad_Get(PikaObj *self, int timeout_ms) {
        KeyEvent keyEvent;
        bool result = MatrixOS::KeyPad::Get(&keyEvent, timeout_ms);
        
        if (result) {
            // Create a new KeyEvent object
            PikaObj* keyEventObj = newNormalObj(New_PikaObj);
            obj_setInt(keyEventObj, (char*)"id", keyEvent.id);
            
            // Create KeyInfo object
            PikaObj* keyInfoObj = newNormalObj(New_PikaObj);
            obj_setInt(keyInfoObj, (char*)"state", keyEvent.info.state);
            obj_setInt(keyInfoObj, (char*)"velocity", (int)keyEvent.info.velocity);
            obj_setInt(keyInfoObj, (char*)"lastEventTime", keyEvent.info.lastEventTime);
            obj_setInt(keyInfoObj, (char*)"hold", keyEvent.info.hold ? 1 : 0);
            
            obj_setRef(keyEventObj, (char*)"info", keyInfoObj);
            return keyEventObj;
        }
        
        return NULL;
    }

    PikaObj* MatrixOSAPI_KeyPad_GetKey(PikaObj *self, PikaObj* keyXY) {
        int x = obj_getInt(keyXY, (char*)"x");
        int y = obj_getInt(keyXY, (char*)"y");
        Point point(x, y);
        
        KeyInfo* keyInfo = MatrixOS::KeyPad::GetKey(point);
        if (keyInfo) {
            PikaObj* keyInfoObj = newNormalObj(New_PikaObj);
            obj_setInt(keyInfoObj, (char*)"state", keyInfo->state);
            obj_setInt(keyInfoObj, (char*)"velocity", (int)keyInfo->velocity);
            obj_setInt(keyInfoObj, (char*)"lastEventTime", keyInfo->lastEventTime);
            obj_setInt(keyInfoObj, (char*)"hold", keyInfo->hold ? 1 : 0);
            return keyInfoObj;
        }
        
        return NULL;
    }

    PikaObj* MatrixOSAPI_KeyPad_GetKeyByID(PikaObj *self, int keyID) {
        KeyInfo* keyInfo = MatrixOS::KeyPad::GetKey(keyID);
        if (keyInfo) {
            PikaObj* keyInfoObj = newNormalObj(New_PikaObj);
            obj_setInt(keyInfoObj, (char*)"state", keyInfo->state);
            obj_setInt(keyInfoObj, (char*)"velocity", (int)keyInfo->velocity);
            obj_setInt(keyInfoObj, (char*)"lastEventTime", keyInfo->lastEventTime);
            obj_setInt(keyInfoObj, (char*)"hold", keyInfo->hold ? 1 : 0);
            return keyInfoObj;
        }
        
        return NULL;
    }

    void MatrixOSAPI_KeyPad_Clear(PikaObj *self) {
        MatrixOS::KeyPad::Clear();
    }

    int MatrixOSAPI_KeyPad_XY2ID(PikaObj *self, PikaObj* xy) {
        int x = obj_getInt(xy, (char*)"x");
        int y = obj_getInt(xy, (char*)"y");
        Point point(x, y);
        return MatrixOS::KeyPad::XY2ID(point);
    }

    PikaObj* MatrixOSAPI_KeyPad_ID2XY(PikaObj *self, int keyID) {
        Point point = MatrixOS::KeyPad::ID2XY(keyID);
        PikaObj* pointObj = newNormalObj(New_PikaObj);
        obj_setInt(pointObj, (char*)"x", point.x);
        obj_setInt(pointObj, (char*)"y", point.y);
        return pointObj;
    }
}