# MatrixOS Python Interface - File System (Vanilla Python API)
# Pythonic file system operations with automatic sandboxing

from typing import List, Optional, Union
from MatrixOS_FileMode import FileMode, SeekMode

# Vanilla Python-style file operations
def open(file: str, mode: str = "r", buffering: int = -1, encoding: Optional[str] = None) -> "FileObject": ...
def listdir(path: str = ".") -> List[str]: ...
def mkdir(path: str, mode: int = 0o777) -> None: ...
def makedirs(path: str, mode: int = 0o777, exist_ok: bool = False) -> None: ...
def remove(path: str) -> None: ...
def rmdir(path: str) -> None: ...
def rename(src: str, dst: str) -> None: ...
def getcwd() -> str: ...
def chdir(path: str) -> None: ...

# Path operations
class path:
    def exists(path: str) -> bool: ...
    def isfile(path: str) -> bool: ...
    def isdir(path: str) -> bool: ...
    def getsize(path: str) -> int: ...
    def join(*paths: str) -> str: ...
    def dirname(path: str) -> str: ...
    def basename(path: str) -> str: ...
    def splitext(path: str) -> tuple: ...

# File object class (similar to Python's built-in file object)
class FileObject:
    def __init__(self, path: str, mode: str): ...
    def __del__(self): ...
    def __enter__(self) -> FileObject: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

    def read(self, size: int = -1) -> Union[str, bytes]: ...
    def readline(self, size: int = -1) -> Union[str, bytes]: ...
    def readlines(self, hint: int = -1) -> List[Union[str, bytes]]: ...
    def write(self, data: Union[str, bytes]) -> int: ...
    def writelines(self, lines: List[Union[str, bytes]]) -> None: ...
    def seek(self, offset: int, whence: int = 0) -> int: ...
    def tell() -> int: ...
    def flush() -> None: ...
    def close() -> None: ...
    def closed() -> bool: ...
    def readable() -> bool: ...
    def writable() -> bool: ...
    def seekable() -> bool: ...