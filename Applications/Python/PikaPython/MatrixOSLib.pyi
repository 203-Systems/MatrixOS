# MatrixOS Python Interface
# Generated from OS/MatrixOS.h

class Point:
    def __init__(self, x: int = 0, y: int = 0): ...
    def __add__(self, other: 'Point') -> 'Point': ...
    def __sub__(self, other: 'Point') -> 'Point': ...
    def __mul__(self, val: int) -> 'Point': ...
    def __div__(self, val: int) -> 'Point': ...
    def __eq__(self, other: 'Point') -> bool: ...
    def __ne__(self, other: 'Point') -> bool: ...
    def Rotate(self, rotation: int, dimension: 'Point', reverse: bool = False) -> 'Point': ...
    @staticmethod
    def Invalid() -> 'Point': ...
    x: int
    y: int

# class Color:
#     def __init__(self, value: int = 0): ...
#     def __init__(self, r: int, g: int, b: int): ...

class KeyInfo:
    state: int

class KeyEvent:
    id: int
    info: KeyInfo

# class MidiPacket:
#     def __init__(self): ...
#     def __init__(self, status: int, data1: int = 0, data2: int = 0): ...
#     def __init__(self, port: int, status: int, data1: int = 0, data2: int = 0): ...
#     port: int
#     status: int
#     data: list

# System functions
def Reboot() -> None: ...
def Bootloader() -> None: ...
def DelayMs(ms: int) -> None: ...
def Millis() -> int: ...
def OpenSetting() -> None: ...
def ExecuteAPP(author: str, app_name: str) -> None: ...
def ExecuteAPPByID(app_id: int) -> None: ...

# class LED:
#     def NextBrightness(self) -> None: ...
#     def SetBrightness(self, brightness: int) -> None: ...
#     def SetBrightnessMultiplier(self, partition_name: str, multiplier: float) -> None: ...
#     def SetColor(self, xy: Point, color: Color, layer: int = 255) -> None: ...
#     def SetColorByID(self, id: int, color: Color, layer: int = 255) -> None: ...
#     def Fill(self, color: Color, layer: int = 255) -> None: ...
#     def FillPartition(self, partition: str, color: Color, layer: int = 255) -> None: ...
#     def Update(self, layer: int = 255) -> None: ...
#     def CurrentLayer(self) -> int: ...
#     def CreateLayer(self, crossfade: int = 500) -> int: ...
#     def CopyLayer(self, dest: int, src: int) -> None: ...
#     def DestroyLayer(self, crossfade: int = 500) -> bool: ...
#     def Fade(self, crossfade: int = 500) -> None: ...
#     def PauseUpdate(self, pause: bool = True) -> None: ...
#     def GetLedCount(self) -> int: ...

class KEYPAD:
    def Get(self, timeout_ms: int = 0) -> KeyEvent: ...
    def GetKey(self, keyXY: Point) -> KeyInfo: ...
    def GetKeyByID(self, keyID: int) -> KeyInfo: ...
    def Clear(self) -> None: ...
    def XY2ID(self, xy: Point) -> int: ...
    def ID2XY(self, keyID: int) -> Point: ...

# class USB:
#     def Inited(self) -> bool: ...
#     def Connected(self) -> bool: ...
    
#     class CDC:
#         def Connected(self) -> bool: ...
#         def Available(self) -> int: ...
#         def Poll(self) -> None: ...
#         def Print(self, text: str) -> None: ...
#         def Println(self, text: str) -> None: ...
#         def Printf(self, format: str) -> None: ...
#         def Flush(self) -> None: ...
#         def Read(self) -> int: ...
#         def ReadBytes(self, length: int) -> bytes: ...
#         def ReadString(self) -> str: ...

# class MIDI:
#     def Get(self, timeout_ms: int = 0) -> MidiPacket: ...
#     def Send(self, packet: MidiPacket, timeout_ms: int = 0) -> bool: ...
#     def SendSysEx(self, port: int, length: int, data: bytes, include_meta: bool = True) -> bool: ...

# class HID:
#     def Ready(self) -> bool: ...
    
#     class Keyboard:
#         def Write(self, keycode: int) -> bool: ...
#         def Press(self, keycode: int) -> bool: ...
#         def Release(self, keycode: int) -> bool: ...
#         def Remove(self, keycode: int) -> bool: ...
#         def ReleaseAll(self) -> None: ...
    
#     # class Mouse:
#         def Click(self, keycode: int) -> None: ...
#         def Press(self, keycode: int) -> None: ...
#         def Release(self, keycode: int) -> None: ...
#         def ReleaseAll(self) -> None: ...
#         # def Move(self, x: int, y: int, wheel: int = 0) -> None: ...
    
#     class Touch:
#         def Click(self, keycode: int) -> None: ...
#         def Press(self, keycode: int) -> None: ...
#         def Release(self, keycode: int) -> None: ...
#         def ReleaseAll(self) -> None: ...
#         # def MoveTo(self, x: int, y: int, wheel: int = 0) -> None: ...
#         # def Move(self, x: int, y: int, wheel: int = 0) -> None: ...
    
#     class Gamepad:
#         def Press(self, button_id: int) -> None: ...
#         def Release(self, button_id: int) -> None: ...
#         def ReleaseAll(self) -> None: ...
#         def Button(self, button_id: int, state: bool) -> None: ...
#         def Buttons(self, button_mask: int) -> None: ...
#         def XAxis(self, value: int) -> None: ...
#         def YAxis(self, value: int) -> None: ...
#         def ZAxis(self, value: int) -> None: ...
#         def RXAxis(self, value: int) -> None: ...
#         def RYAxis(self, value: int) -> None: ...
#         def RZAxis(self, value: int) -> None: ...
#         def DPad(self, direction: int) -> None: ...
    
#     class Consumer:
#         def Write(self, keycode: int) -> None: ...
#         def Press(self, keycode: int) -> None: ...
#         def Release(self, keycode: int) -> None: ...
#         def ReleaseAll(self) -> None: ...
    
#     class System:
#         def Write(self, keycode: int) -> None: ...
#         def Press(self, keycode: int) -> None: ...
#         def Release(self) -> None: ...
#         def ReleaseAll(self) -> None: ...

# class Logging:
#     def LogError(self, tag: str, message: str) -> None: ...
#     def LogWarning(self, tag: str, message: str) -> None: ...
#     def LogInfo(self, tag: str, message: str) -> None: ...
#     def LogDebug(self, tag: str, message: str) -> None: ...
#     def LogVerbose(self, tag: str, message: str) -> None: ...

# class NVS:
#     def GetSize(self, hash: int) -> int: ...
#     def GetVariable(self, hash: int) -> bytes: ...
#     def SetVariable(self, hash: int, data: bytes) -> bool: ...
#     def DeleteVariable(self, hash: int) -> bool: ...

# # Constants
# RELEASED: int = 0
# PRESSED: int = 1 
# HOLD: int = 2

# NOTE_OFF: int = 0x80
# NOTE_ON: int = 0x90
# AFTER_TOUCH: int = 0xA0
# CONTROL_CHANGE: int = 0xB0
# PROGRAM_CHANGE: int = 0xC0
# CHANNEL_PRESSURE: int = 0xD0
# PITCH_CHANGE: int = 0xE0

# UP: int = 0
# RIGHT: int = 90
# DOWN: int = 180
# LEFT: int = 270

# MOUSE_LEFT: int = 1
# MOUSE_RIGHT: int = 2
# MOUSE_MIDDLE: int = 4