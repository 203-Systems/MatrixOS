#pragma once

#include "MatrixOS.h"
#include "system/USB/USB.h"
#include "usbd_audio.h"
#include "usb_midi.h"

namespace MatrixOS::USB
{
  class MIDI : public UsbInterface
  {
    // static vector<MIDI*> midi_interfaces;
    // uint8_t midi_id;
    // uint8_t interface_id;
    // string interface_name;
    // uint8_t cable_nums;
    // MidiPort midi_port;
    // TaskHandle_t port_task;
    // list<MidiPort> midi_ports;
    // vector<TaskHandle_t> port_tasks;
    // uint16_t ep_size;

    vector<MidiPort> midi_ports;
    TaskHandle_t interface_task;
    vector<uint8_t> in_ep;
    inline static map<uint8_t, bool> in_ep_busy = {};
    inline static map<uint8_t, void*> in_ep_buffer = {};
    vector<uint8_t> out_ep;
    inline static map<uint8_t, bool> out_ep_busy = {};
    inline static map<uint8_t, void*> out_ep_buffer = {};

   public:
    MIDI();
    vector<MidiPort>* Begin(string interface_name = "", uint16_t ep_size = 64); // Use "" as interface name will use default string generated by the OS
    vector<MidiPort>* Begin(uint8_t cable_nums, string interface_name = "", uint16_t ep_size = 64); // Use "" as interface name will use default string generated by the OS
    ~MIDI();
    
    private:
    void Init(uint8_t cable_nums, string interface_name, uint16_t ep_size);
    static void InterfaceTask(void* param);
    static void usbd_midi_bulk_in(uint8_t busid, uint8_t ep, uint32_t nbytes);
    static void usbd_midi_bulk_out(uint8_t busid, uint8_t ep, uint32_t nbytes);
  };
}



#define AUDIO_AC_STANDARD_DESCRIPTOR_INIT(bInterfaceNumber, strIdx) \
  0x09,                              /* bLength */                  \
      USB_DESCRIPTOR_TYPE_INTERFACE, /* bDescriptorType */          \
      bInterfaceNumber,              /* bInterfaceNumber */         \
      0x00,                          /* bAlternateSetting */        \
      0x00,                          /* bNumEndpoints */            \
      USB_DEVICE_CLASS_AUDIO,        /* bInterfaceClass */          \
      AUDIO_SUBCLASS_AUDIOCONTROL,   /* bInterfaceSubClass */       \
      AUDIO_PROTOCOL_UNDEFINED,      /* bInterfaceProtocol */       \
      strIdx                         /* iInterface */

#define AUDIO_AC_STANDARD_DESCRIPTOR_INIT_LEN 9

#define AUDIO_AC_HEADER_DESCRIPTOR_INIT(bInterfaceNumber)         \
  0x09,                                  /* bLength */            \
      USB_CS_DESCRIPTOR_TYPE_INTERFACE,  /* bDescriptorType */    \
      MIDI_MS_HEADER_DESCRIPTOR_SUBTYPE, /* bDescriptorSubtype */ \
      WBVAL(0x0100),                     /* bcdMSC */             \
      WBVAL(0x0009),                     /* wTotalLength */       \
      0x01,                              /* bInCollection */      \
      bInterfaceNumber                   /* baInterfaceNr */

#define AUDIO_AC_HEADER_DESCRIPTOR_INIT_LEN 9

#define MIDI_JACKID_IN(bJackType, cableIdx) \
  (uint8_t)(((cableIdx) - 1) * 4 + bJackType) // bJackType: 1 = EMBEDDED, 2 = EXTERNAL

#define MIDI_JACKID_OUT(bJackType, cableIdx) \
  (uint8_t)(((cableIdx) - 1) * 4 + 2 + bJackType) // bJackType: 1 = EMBEDDED, 2 = EXTERNAL

#define MIDI_IN_JACK_DESCRIPTOR_INIT(bJackType, cableIdx, strIdx) \
    0x06,                                                \
    0x24,                                                \
    MIDI_MIDI_IN_JACK_DESCRIPTOR_SUBTYPE,                \
    bJackType,                                           \
    MIDI_JACKID_IN(bJackType, cableIdx),                                             \
    strIdx
  
#define MIDI_OUT_JACK_DESCRIPTOR_INIT(bJackType, cableIdx, bSourceJackType, sourceIdx, strIdx) \
    0x09,                                                             \
    0x24,                                                             \
    MIDI_MIDI_OUT_JACK_DESCRIPTOR_SUBTYPE,                            \
    bJackType,                                                        \
    MIDI_JACKID_IN(bJackType, cableIdx),                                                          \
    0x01,                                                             \
    MIDI_JACKID_IN(bSourceJackType, sourceIdx),                                                     \
    0x01,                                                             \
    strIdx
  
#define MIDI_DESCRIPTOR_ENDPOINT(ep, epSize, jackNums) \
  /* Endpoint: Note Audio v1.0's endpoint has 9 bytes instead of 7 */\
  9, 0x05, ep, 0x02, WBVAL(epSize), 0, 0, 0, \
  /* MS Endpoint (connected to embedded jack) */\
  (uint8_t)(4 + (jackNums)), 0x25, 0x01, jackNums