
Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x08002000         0x0007e000         xr
RAM              0x20000000         0x00010000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

                0x20010000                _estack = (ORIGIN (RAM) + LENGTH (RAM))
                0x00000200                _Min_Heap_Size = 0x200
                0x00000400                _Min_Stack_Size = 0x400

.isr_vector     0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
 *(.isr_vector)
                0x08002000                . = ALIGN (0x4)

.text           0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
 *(.text)
 *(.text*)
 *(.glue_7)
 .glue_7        0x08002000        0x0 linker stubs
 *(.glue_7t)
 .glue_7t       0x08002000        0x0 linker stubs
 *(.eh_frame)
 *(.init)
 *(.fini)
                0x08002000                . = ALIGN (0x4)
                0x08002000                _etext = .

.vfp11_veneer   0x08002000        0x0
 .vfp11_veneer  0x08002000        0x0 linker stubs

.v4_bx          0x08002000        0x0
 .v4_bx         0x08002000        0x0 linker stubs

.rodata         0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
 *(.rodata)
 *(.rodata*)
                0x08002000                . = ALIGN (0x4)

.ARM.extab      0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x08002000                . = ALIGN (0x4)

.ARM            0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
                0x08002000                __exidx_start = .
 *(.ARM.exidx*)
                0x08002000                __exidx_end = .
                0x08002000                . = ALIGN (0x4)

.preinit_array  0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
                [!provide]                PROVIDE (__preinit_array_start = .)
 *(.preinit_array*)
                [!provide]                PROVIDE (__preinit_array_end = .)
                0x08002000                . = ALIGN (0x4)

.init_array     0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
                [!provide]                PROVIDE (__init_array_start = .)
 *(SORT_BY_NAME(.init_array.*))
 *(.init_array*)
                [!provide]                PROVIDE (__init_array_end = .)
                0x08002000                . = ALIGN (0x4)

.fini_array     0x08002000        0x0
                0x08002000                . = ALIGN (0x4)
                [!provide]                PROVIDE (__fini_array_start = .)
 *(SORT_BY_NAME(.fini_array.*))
 *(.fini_array*)
                [!provide]                PROVIDE (__fini_array_end = .)
                0x08002000                . = ALIGN (0x4)
                0x08002000                _sidata = LOADADDR (.data)

.data           0x20000000        0x0 load address 0x08002000
                0x20000000                . = ALIGN (0x4)
                0x20000000                _sdata = .
 *(.data)
 *(.data*)
                0x20000000                . = ALIGN (0x4)
                0x20000000                _edata = .
                0x20000000                . = ALIGN (0x4)

.bss            0x20000000        0x0 load address 0x08002000
                0x20000000                _sbss = .
                0x20000000                __bss_start__ = _sbss
 *(.bss)
 *(.bss*)
 *(COMMON)
                0x20000000                . = ALIGN (0x4)
                0x20000000                _ebss = .
                0x20000000                __bss_end__ = _ebss

._user_heap_stack
                0x20000000      0x600 load address 0x08002000
                0x20000000                . = ALIGN (0x8)
                [!provide]                PROVIDE (end = .)
                [!provide]                PROVIDE (_end = .)
                0x20000200                . = (. + _Min_Heap_Size)
 *fill*         0x20000000      0x200 
                0x20000600                . = (. + _Min_Stack_Size)
 *fill*         0x20000200      0x400 
                0x20000600                . = ALIGN (0x8)

/DISCARD/
 libc.a(*)
 libm.a(*)
 libgcc.a(*)

.ARM.attributes
 *(.ARM.attributes)
START GROUP
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/thumb/v7-m/nofp\libgcc.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libnosys.a
END GROUP
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libstdc++_nano.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libm.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libc_nano.a
START GROUP
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/thumb/v7-m/nofp\libgcc.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libg_nano.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libc_nano.a
END GROUP
START GROUP
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/thumb/v7-m/nofp\libgcc.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libc_nano.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libnosys.a
END GROUP
START GROUP
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/thumb/v7-m/nofp\libgcc.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libc_nano.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libnosys.a
END GROUP
OUTPUT(-DSTM32F103xE elf32-littlearm)
LOAD linker stubs
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libc.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp\libm.a
LOAD c:/program files (x86)/gnu arm embedded toolchain/10 2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/thumb/v7-m/nofp\libgcc.a

Cross Reference Table

Symbol                                            File
No symbols
